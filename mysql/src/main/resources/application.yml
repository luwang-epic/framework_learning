server:
  port: 11180



spring:
  datasource:
    druid00username: root
    druid00password: 19920625
    druid00jdbcUrl: jdbc:mysql://localhost:3306/sharding00
    druid00driverClass: com.mysql.jdbc.Driver

    druid01username: root
    druid01password: 19920625
    druid01jdbcUrl: jdbc:mysql://localhost:3306/sharding01
    druid01driverClass: com.mysql.jdbc.Driver

    druid02username: root
    druid02password: 19920625
    druid02jdbcUrl: jdbc:mysql://localhost:3306/sharding02
    druid02driverClass: com.mysql.jdbc.Driver

  main:
    # 一般配置完  maven包后，springboot 的默认数据库连接就会优选选择sharding的了
    # 比较严格，所以呢，需要在配置文件添加一个属性
    allow-bean-definition-overriding: true

mybatis:
  configuration:
    map-underscore-to-camel-case: true

####  自己的分库分表设置
#配置分表分库设置属性
tuling:
  dsroutingset:
    #分为三个数据库
    dataSourceNum: 3
    #每一个库分为4个相同的表结构
    tableNum: 4
    #指定路由的字段
    routingField: orderId
    tableSuffixStyle: '%04d'
    tableSuffixConnect: _
    routingStrategy: ROUTING_DS_TABLE_STRATEGY



####  sharding jdbc分库分表的配置
### 数据源名称，多数据源以逗号分隔


sharding:
  jdbc:
    datasource:
      names: ds0
      # 数据源ds0
      ds0:
        type: com.alibaba.druid.pool.DruidDataSource
        driverClassName: com.mysql.jdbc.Driver
        url: jdbc:mysql://localhost:3306/sharding00
        username: root
        password: 19920625

# 分表策略 其中user为逻辑表 分表主要取决于age行
    config:
      sharding:
        tables:
          user:
            #数据节点,均匀分布 多数据源使用ds${0..1}.t_user${0..1}
            actual-data-nodes: ds0.user_$->{0..1}
#            database-strategy:   #分库策略， 如果只有一个数据源就不需要了
#              inline: #行表达式
#                sharding-column: city_id        #列名称，多个列以逗号分隔
#                algorithm-expression: ds${city_id % 2}    #按模运算分配
            #分表策略
            table-strategy:
              #行表达式
              inline:
                sharding-column: age
                # 分片算法表达式 行表达式分片策略
                # 对应InlineShardingStrategy。使用Groovy的表达式，提供对SQL语句中的=和IN的分片操作支持，只支持单分片键。
                # 对于简单的分片算法，可以通过简单的配置使用，从而避免繁琐的Java代码开发，如: user_$->{age % 2} 表示user表根据age模2，而分成2张表，表名称为user_0到user_1。
                algorithm-expression: user_$->{age % 2}

            # 主键 UUID 18位数 如果是分布式还要进行一个设置 防止主键重复
            # 通过在客户端生成自增主键替换以数据库原生自增主键的方式，做到分布式主键无重复。 采用UUID.randomUUID()的方式产生分布式主键。或者 SNOWFLAKE
            key-generator-column-name: id


      # 打印执行的数据库以及语句
      props:
        sql:
          show: true